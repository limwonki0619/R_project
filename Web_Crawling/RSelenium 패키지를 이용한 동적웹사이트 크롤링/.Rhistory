updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_extract("\\d+")        # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_split_fixed(">",3)       # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_split_fixed(">",3)[3]       # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_split_fixed(">",3)[,3]       # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_split_fixed(">",3)       # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_split_fixed(">",3)[[3]]       # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_split_fixed(">",3)       # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>%        # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy")         # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% grep("sympathy")         # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy")         # 공감/비공감 소스
}
updown
str(updown)
lis <- NULL
updown <- NULL
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% html_text()          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% grep("sympathy")           # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy")           # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_detect("\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d+")[2,]          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d{2}")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d{1,4}")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("^\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy&\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_subset("\\d+")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("[\w]")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("[\\w]")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_match_all("[^\\w+]")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+]")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+|^\\d+]")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+&^\\d+]")          # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+]|[^\\d+]")          # 공감/비공감 소스
}
updown
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+]|[^\\d+]") %>% -str_sub(1,7)           # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+]|[^\\d+]") %>% str_sub(1,7)           # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+]|[^\\d+]") %>% str_sub(1,7)           # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+]|[^\\d+]") %>% str_remove(str_sub(1,7)) # 공감/비공감 소스
}
updown
lis <- NULL
updown <- NULL
for (url in page_url) {
html <- read_html(url)
lis <- html %>% html_node("div.score_result") %>% html_nodes("li") # 공통 경로
updown <- lis %>% html_node(".btn_area") %>% html_nodes("strong") %>% str_subset("sympathy") %>% str_remove_all("[^\\w+]|[^\\d+]")  # 공감/비공감 소스
}
updown
setwd("D:/limworkspace/R_project/Web_Crawling/RSelenium 패키지를 이용한 동적웹사이트 크롤링")
install.packages("RSelenium")
library(RSelenium)
library(rvest)
library(stringr)
trim <- function(text){gsub("^\\s+|\\s+$","",text)}
remDr <-remoteDriver(remoteServerAddr="localhost", port=4445L, borwserName="chorme")
remDr <-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chorme")
remDr$open()
remDr <-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chrome")
remDr$open()
remDr$navigate("https://nid.naver.com/nidlogin.login")
txt_id <- remDr$findElement(using = "css selector", value="#id") # findElement == rvest::html_node 함수를 이용하여 특정 위치를 지정할 수 있다.
txt_pw <- remDr$findElement(using = "id", value = "pw")    # 이 때 "xpath" 방식과 "css selector" 방식이 있습니다.
login_btn <- remDr$findElement(using="css selector", value = ".btn_global")
txt_id$setElementAttribute("value", "limwk0619")
txt_id$setElementAttribute("value", "#dladnjsrl")
login_btn$clearElement
txt_id$setElementAttribute("value", "limwk0619")
txt_pw$setElementAttribute("value", "#dladnjsrl")
login_btn$clearElement
login_btn$clickElement()
txt_id$setElementAttribute("value", "limwk0619")
txt_id$setElementAttribute("value", "limwk0619")
txt_pw$setElementAttribute("value", "#dladnjsrl")
login_btn$clickElement()
remDr <-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chrome") # 브라우저 호출
remDr$open() # 크롬창 실행
remDr$navigate("https://nid.naver.com/nidlogin.login") # 해당 url로 찾아가기
txt_id <- remDr$findElement(using = "css selector", value="#id") # findElement == rvest::html_node 함수를 이용하여 특정 위치를 지정할 수 있다.
txt_pw <- remDr$findElement(using = "id", value = "pw")    # 이 때 "xpath" 방식과 "css selector" 방식이 있습니다.
login_btn <- remDr$findElement(using="css selector", value = ".btn_global")
txt_id$setElementAttribute("value", "limwk0619")
txt_pw$setElementAttribute("value", "#dladnjsrl")
login_btn$clickElement()
txt_id$setElementAttribute("value", "limwk0619")
txt_pw$setElementAttribute("value", "#dladnjsrl1")
txt_id$setElementAttribute("value", "limwk0619")
txt_id <- remDr$findElement(using = "css selector", value="#id") # findElement == rvest::html_node 함수를 이용하여 특정 위치를 지정할 수 있다.
txt_pw <- remDr$findElement(using = "id", value = "pw")    # 이 때 "xpath" 방식과 "css selector" 방식이 있습니다.
txt_id$setElementAttribute("value", "limwk0619")
txt_pw$setElementAttribute("value", "#dladnjsrl1")
login_btn$clickElement()
remDr$open() # 크롬창 실행
remDr <-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chrome") # 브라우저 호출
remDr$open() # 크롬창 실행
remDr <-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chrome") # 브라우저 호출
remDr$navigate("https://nid.naver.com/nidlogin.login") # 해당 url로 찾아가기
remDr$navigate("https://nid.naver.com/nidlogin.login") # 해당 url로 찾아가기
remDr$open() # 크롬창 실행
remDr$navigate("https://nid.naver.com/nidlogin.login") # 해당 url로 찾아가기
txt_id <- remDr$findElement(using = "css selector", value="#id") # findElement == rvest::html_node 함수를 이용하여 특정 위치를 지정할 수 있다.
txt_pw <- remDr$findElement(using = "id", value = "pw")    # 이 때 "xpath" 방식과 "css selector" 방식이 있습니다.
login_btn <- remDr$findElement(using="css selector", value = ".btn_global")
txt_id$setElementAttribute("value", "limwk0619")
txt_pw$setElementAttribute("value", "#dladnjsrl1")
login_btn$clickElement()
remDr <-remoteDriver(remoteServerAddr="localhost", port=4445L, browserName="chrome") # 브라우저 호출
remDr$open() # 크롬창 실행
remDr$navigate("https://nid.naver.com/nidlogin.login") # 해당 url로 찾아가기
txt_id <- remDr$findElement("css selector", "#id") # findElement == rvest::html_node 함수를 이용하여 특정 위치를 지정할 수 있다.
txt_pw <- remDr$findElement("css selector", "#pw")    # 이 때 "xpath" 방식과 "css selector" 방식이 있습니다.
login_btn <- remDr$findElement("css selector", ".btn_global")
txt_id$setElementAttribute("value", "limwk0619")
txt_pw$setElementAttribute("value", "#dladnjsrl1")
login_btn$clickElement()
remDr$navigate("https://mail.naver.com/")
mail_texts <- remDr$findElement("css selector", "#list_for_view")
mail <- remDr$findElement("css selector", "#list_for_view")
mail_text <- mail$getElementText()
mail_text
mail_texts <- mail$getElementText()
mail_texts <- mail$getElementText()
tmp <- str_split(mail_texts, '\n') %>% .[[1]]
tmp
str_split(mail_texts, '\n')
tmp <- str_split(mail_texts, '\n') %>% .[[1]]
tmp
tmp <- str_split(mail_texts, '\n')
tmp
tmp <- str_split(mail_texts, '\n') # %>% .[[1]]
tmp
tmp <- str_split(mail_texts, '\n') %>% .[[1]]
tmp
sender <- NULL
subject <- NULL
time <- NULL
for (i in 1:20) {
sender <- c(sender, tmp[4*i-3])
subject <- c(subject, tmp[4*i-2])
time <- c(time, tmp[4*i-1])
}
df_mail <- data.frame(sender=sender,
subject=subject,
time=time)
df_mail
mail_texts
mail
mail_sender <- remDr$findElement("css selector", ".name _ccr(lst.from) ")
mail_sender <- remDr$findElement("css selector", ".name._ccr(lst.from) ")
mail_sender
mail_sender <- remDr$findElement("css selector", ".name._ccr(lst.from)")
mail_sender <- remDr$findElement("css selector", "div.name._ccr(lst.from)")
mail_sender
mail_sender <- remDr$findElement("css selector", ".mTitle")
mail_sender
mail_sender <- remDr$findElement("css selector", "name._ccr(lst.from).")
mail_sender <- remDr$findElement("css selector", ".name._ccr(lst.from).")
mail_sender <- remDr$findElement("css selector", ".name._ccr(lst.from)")
mail_sender <- remDr$findElement("css selector", ".mTitle")
mail_sender
mail_sender <- remDr$findElement("css selector", ".mInfo")
mail_sender
mail_sender <- remDr$findElement("css selector", ".mInfo") %>% getElementText()
mail_sender <- remDr$findElement("css selector", ".mInfo") %>% .$getElementText()
mail_sender <- remDr$findElement("css selector", ".mInfo") %>% getElementText()
mail_sender <- remDr$findElement("css selector", ".mInfo") %>% RSelenium::getElementText()
mail_sender <- remDr$findElement("css selector", ".mInfo") %>% RSelenium::getElementText()
mail_sender <- remDr$findElement("css selector", ".mInfo")
sender <- mail_sender$getElementText()
sender
mail_sender <- remDr$findElement("css selector", ".mInfo")
sender <- mail_sender$getElementText()
sender
mail
mail_sender
sender
mail_sender
mail_texts <- mail$getElementText() # 모든 텍스트 추출
mail_texts
mail_sender <- remDr$findElements("css selector", ".mInfo")
sender <- mail_sender$getElementText()
sender
mail_sender <- remDr$findElement("css selector", ".mInfo")
sender <- mail_sender$getElementText()
sender
mail <- remDr$findElement("css selector", "#list_for_view") # 메일이 담긴 위치
mail_texts <- mail$getElementText() # 모든 텍스트 추출
tmp <- str_split(mail_texts, '\n') %>% .[[1]] # \n기준으로 나눈 후, 데이터에서 첫 번째 속성값만 가져오기
# 데이터 추출 loop ------------------------------------------------------------------------------------------------------
sender <- NULL
subject <- NULL
time <- NULL
for (i in 1:20) {
sender <- c(sender, tmp[4*i-3])
subject <- c(subject, tmp[4*i-2])
time <- c(time, tmp[4*i-1])
}
df_mail <- data.frame(sender=sender,
subject=subject,
time=time)
df_mail
tmp
# 데이터 추출 loop ------------------------------------------------------------------------------------------------------
sender <- NULL
subject <- NULL
time <- NULL
for (i in 1:20) {
sender <- c(sender, tmp[seq(1,length(tmp),3)])
subject <- c(subject, tmp[seq(2,length(tmp),3)])
time <- c(time, tmp[seq(3,length(tmp),3)])
}
df_mail <- data.frame(sender=sender,
subject=subject,
time=time)
View(df_mail)
sender <- remDr$findElement("css selector", ".mTitle")
sender
mail_sender <- sender$getElementText()
mail_sender
sender <- remDr$findElements("css selector", ".mTitle")
mail_sender <- sender$getElementText()
mail_sender
?findElements()
sender <- remDr %>% findElement("css", "#list_for_view") %>% findElements("css", ".mTitle")
library(dplyr)
sender <- remDr %>% findElement("css", "#list_for_view") %>% findElements("css", ".mTitle")
sender <- remDr %>% findElement("css", "#list_for_view") %>% findElements("css", ".mTitle")
sender <- remDr$findElements("class", "mTitle")
sender
mail_sender <- sender$getElementText()
mail_sender
sender <- remDr$findElement("css", "#list_for_view") %>% remDr$findElements("class", "mTitle")
sender <- remDr$findElement("css", "#list_for_view") %>% remDr$findElements("class", "mTitle")
sender <- remDr$findElement("css", "#list_for_view > .mTitle")
mail <- remDr$findElement("css", "#list_for_view") # 메일이 담긴 위치
mail_texts <- mail$getElementText() # 모든 텍스트 추출
tmp <- str_split(mail_texts, '\n') %>% .[[1]] # \n기준으로 나눈 후, 데이터에서 첫 번째 속성값만 가져오기
# 데이터 추출 loop ------------------------------------------------------------------------------------------------------
sender <- NULL
subject <- NULL
time <- NULL
for (i in 1:20) {
sender <- c(sender, tmp[seq(1,length(tmp),3)])
subject <- c(subject, tmp[seq(2,length(tmp),3)])
time <- c(time, tmp[seq(3,length(tmp),3)])
}
df_mail <- data.frame(sender=sender,
subject=subject,
time=time)
View(df_mail)
